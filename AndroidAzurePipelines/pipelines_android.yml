parameters:
  - name: BuildType
    displayName: 'Select your build type'
    default: debug
    values:
      - debug
      - staging
      - release

  - name: OS
    displayName: Operating System
    type: string
    default: windows-latest
    values:
      - windows-latest
      - vs2017-win2016
      - ubuntu-latest
      - ubuntu-16.04
      - macOS-latest
      - macOS-10.14

  - name: CurrentVersion
    displayName: Enter the current version for this release
    type: string
    default: "1.0.1"

trigger:
  - none

variables:
  - name: 'apkFilePath'
    value: '**/*${{ parameters.BuildType }}*.apk'
  - group: AppCenterConfig

stages:
  - stage:
    displayName: 'Building stage'
    jobs:
      - job:
        displayName: 'Android ${{ parameters.BuildType }} build job'
        workspace:
          clean: all
        variables:
          - group: Android_${{ parameters.BuildType }}
        pool:
          vmImage: ${{ parameters.OS }}

        steps:
          - powershell: |
                $BasePath = "$(Build.SourcesDirectory)"
                $BuildGradlePath = "${BasePath}appuild.gradle"
                $BuildGradleUpdatedPath = "${BasePath}appuild.gradle.updated"

                # $File = get-content $BuildGradlePath
                # foreach ($line in $File){
                #   Write-Host $line
                # }
                $buildNumber = $(Build.BuildNumber).ToString()
                $buildNumber = $buildNumber.Replace('.', '')
                $buildNumberLength = $buildNumber.length
                $buildNumber = $buildNumber.Substring(2, $buildNumberLength-2)
                Get-Content $BuildGradlePath | ForEach-Object {
                    if($_ -match "versionCode d"){
                        #$versionCode = $_ -replace "versionCode", "" -as [int]
                        $newVersionCode = $buildNumber
                        
                        Write-Host "Found versionCode ${versionCode}. Updated to ${newVersionCode}"
                        
                        $_ = "        versionCode " + $newVersionCode   
                    }
                    elseif($_ -match "versionName"){
                        Write-Host "Updating versionName to ${{ parameters.CurrentVersion }}"
                        $_ = "        versionName '${{ parameters.CurrentVersion }}'"
                    }
                    $_
                } | Set-Content $BuildGradleUpdatedPath;
                Get-Content $BuildGradleUpdatedPath | Set-Content $BuildGradlePath
                $File = get-content $BuildGradlePath
                foreach ($line in $File){
                  Write-Host $line
                }
            displayName: 'Set codeName & codeVersion'
            continueOnError: false

          # - script: echo "##vso[task.setvariable variable=buildGradle]$(cat '$(Build.SourcesDirectory)appuild.gradle')"
          # - script: echo $(BuildGradlePath)
          
          - task: Gradle@2
            displayName: 'Building Project'
            continueOnError: false
            inputs:
              workingDirectory: ''
              gradleWrapperFile: 'gradlew'
              gradleOptions: '-Xmx3072m'
              publishJUnitResults: false
              tasks: assemble${{ parameters.BuildType }}
              codeCoverageToolOption: 'None'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: 'default'
              jdkArchitectureOption: 'x64'
              checkStyleRunAnalysis: false
              findBugsRunAnalysis: false

          - task: AndroidSigning@3
            continueOnError: false
            displayName: 'Android Signing'
            inputs:
              apkFiles: $(apkFilePath)
              apksign: true
              apksignerKeystoreFile: '${{ parameters.BuildType }}.jks'
              apksignerKeystorePassword: $(apksignerKeystorePassword)
              apksignerKeystoreAlias: $(apksignerKeystoreAlias)
              apksignerKeyPassword: $(apksignerKeyPassword)
              apksignerArguments: '--verbose'
              zipalign: false
          - task: CopyFiles@2
            displayName: 'Copying APK files'
            continueOnError: false
            inputs:
              contents: $(apkFilePath)
              targetFolder: '$(build.artifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: 'Publishing Artifacts'
            continueOnError: false
            inputs:
              pathtoPublish: '$(Build.artifactStagingDirectory)'
              ArtifactName: ${{ parameters.BuildType }}


  - stage: 
    displayName: 'Distribution stage'
    jobs:
      - job:
        displayName: 'Android ${{ parameters.BuildType }} distribute job'
        continueOnError: false
        variables:
        - group: AppCenterConfig
        pool:
          vmImage: ${{ parameters.OS }}
        steps:
        - checkout: none
        - task: DownloadBuildArtifacts@0
          continueOnError: false
          displayName: 'Downloading Published artifacts'
          inputs:
            buildType: 'current'
            downloadType: 'specific'
            itemPattern: '**/*${{ parameters.BuildType }}*.apk'
            downloadPath: '$(System.ArtifactsDirectory)'

        - task: AppCenterDistribute@3
          condition: eq('${{ parameters.BuildType }}', 'release' )
          continueOnError: false
          displayName: 'Distributing ${{ parameters.BuildType }} build'
          inputs:
            serverEndpoint: MyAppCenterConnection
            appSlug: '$(appSlug)'
            appFile: '$(System.ArtifactsDirectory)/${{ parameters.BuildType }}/app/${{ parameters.BuildType }}/*${{ parameters.BuildType }}*.apk'
            releaseNotesOption: 'input'
            releaseNotesInput: '$(Build.SourceVersionMessage)'
            destinationType: 'groups'
            distributionGroupId: '$(androidStagingTestersGroup)'
